{"ast":null,"code":"// remove the timer action creators imports\n// import {\n//   INCREMENT_TIMER,\n//   PAUSE_TIMER,\n//   RESET_TIMER,\n//   START_TIMER\n// } from \"../actions/timerActions\";\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n\n// refactor to use the createSlice method\n// export const timerReducer = (state = INITIAL_STATE, action) => {\n//   switch (action.type) {\n//     case START_TIMER:\n//       return { ...state, isRunning: true };\n//     case PAUSE_TIMER:\n//       return { ...state, isRunning: false };\n\n//     case RESET_TIMER:\n//       return { isRunning: false, elapsedTime: 0 };\n//     case INCREMENT_TIMER:\n//       return { ...state, elapsedTime: ++state.elapsedTime };\n//     default:\n//       return state;\n//   }\n// };\n\n// export the timer reducer function and action creators here\n\nvar INITIAL_STATE = {\n  isRunning: false,\n  elapsedTime: 0\n};\nvar timerSlice = createSlice({\n  name: \"timer\",\n  initialState: INITIAL_STATE,\n  reducers: {\n    startTimer: function startTimer(state) {\n      state.isRunning = true;\n    },\n    pauseTimer: function pauseTimer(state) {\n      state.isRunning = false;\n    },\n    resetTimer: function resetTimer(state) {\n      state.isRunning = false;\n      state.elapsedTime = 0;\n    },\n    incrementTimer: function incrementTimer(state) {\n      state.elapsedTime++;\n    }\n  }\n});\nexport var timerReducer = timerSlice.reducer;\nexport var acto = timerSlice.actions;","map":{"version":3,"names":["createSlice","INITIAL_STATE","isRunning","elapsedTime","timerSlice","name","initialState","reducers","startTimer","state","pauseTimer","resetTimer","incrementTimer","timerReducer","reducer","acto","actions"],"sources":["D:/vsCode/React/Redux ToolKit/05_Using Redux Toolkit/src/redux/reducers/timerReducer.js"],"sourcesContent":["// remove the timer action creators imports\r\n// import {\r\n//   INCREMENT_TIMER,\r\n//   PAUSE_TIMER,\r\n//   RESET_TIMER,\r\n//   START_TIMER\r\n// } from \"../actions/timerActions\";\r\n\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n// refactor to use the createSlice method\r\n// export const timerReducer = (state = INITIAL_STATE, action) => {\r\n//   switch (action.type) {\r\n//     case START_TIMER:\r\n//       return { ...state, isRunning: true };\r\n//     case PAUSE_TIMER:\r\n//       return { ...state, isRunning: false };\r\n\r\n//     case RESET_TIMER:\r\n//       return { isRunning: false, elapsedTime: 0 };\r\n//     case INCREMENT_TIMER:\r\n//       return { ...state, elapsedTime: ++state.elapsedTime };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export the timer reducer function and action creators here\r\n\r\nconst INITIAL_STATE = { isRunning: false, elapsedTime: 0 };\r\n\r\nconst timerSlice = createSlice({\r\n  name: \"timer\",\r\n  initialState: INITIAL_STATE,\r\n  reducers: {\r\n    startTimer: (state) => {\r\n      state.isRunning = true;\r\n    },\r\n    pauseTimer: (state) => {\r\n      state.isRunning = false;\r\n    },\r\n    resetTimer: (state) => {\r\n      state.isRunning = false;\r\n      state.elapsedTime = 0;\r\n    },\r\n    incrementTimer: (state) => {\r\n      state.elapsedTime++;\r\n    },\r\n  },\r\n});\r\n\r\nexport const timerReducer = timerSlice.reducer;\r\n\r\nexport const acto =\r\n  timerSlice.actions;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,IAAMC,aAAa,GAAG;EAAEC,SAAS,EAAE,KAAK;EAAEC,WAAW,EAAE;AAAE,CAAC;AAE1D,IAAMC,UAAU,GAAGJ,WAAW,CAAC;EAC7BK,IAAI,EAAE,OAAO;EACbC,YAAY,EAAEL,aAAa;EAC3BM,QAAQ,EAAE;IACRC,UAAU,EAAE,SAAAA,WAACC,KAAK,EAAK;MACrBA,KAAK,CAACP,SAAS,GAAG,IAAI;IACxB,CAAC;IACDQ,UAAU,EAAE,SAAAA,WAACD,KAAK,EAAK;MACrBA,KAAK,CAACP,SAAS,GAAG,KAAK;IACzB,CAAC;IACDS,UAAU,EAAE,SAAAA,WAACF,KAAK,EAAK;MACrBA,KAAK,CAACP,SAAS,GAAG,KAAK;MACvBO,KAAK,CAACN,WAAW,GAAG,CAAC;IACvB,CAAC;IACDS,cAAc,EAAE,SAAAA,eAACH,KAAK,EAAK;MACzBA,KAAK,CAACN,WAAW,EAAE;IACrB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,IAAMU,YAAY,GAAGT,UAAU,CAACU,OAAO;AAE9C,OAAO,IAAMC,IAAI,GACfX,UAAU,CAACY,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}